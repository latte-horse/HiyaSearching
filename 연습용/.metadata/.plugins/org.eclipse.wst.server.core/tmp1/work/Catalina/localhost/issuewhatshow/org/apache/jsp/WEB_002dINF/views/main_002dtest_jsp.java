/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2019-10-23 06:12:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_002dtest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/global/resources_body.jsp", Long.valueOf(1571797294963L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <title>JH-test</title>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("  <style> body { margin: 0; } </style>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("  \n");
      out.write("  <h1>VISDATA to 3d-force 테스트</h1>\n");
      out.write("  <button type=\"button\" id=\"btnGetLast\">마지막 timeline visdata 가져오기</button>\n");
      out.write("  <br/>\n");
      out.write("  <hr/>\n");
      out.write("  <div id=\"3d-graph\"></div>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  <!-- global resources -->\n");
      out.write("  ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  <!-- Bootstrap core JavaScript\n");
      out.write("  ================================================== -->\n");
      out.write("  <!-- Placed at the end of the document so the pages load faster -->\n");
      out.write("  <script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/popper.min.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/bootstrap/4.3.1/dist/js/bootstrap.min.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"https://use.fontawesome.com/releases/v5.2.0/js/all.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.6.2/bootstrap-slider.min.js\"></script>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  \n");
      out.write("  <!-- current resources -->\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/js/home.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/three.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/three-spritetext.js\"></script>\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/3d-force-graph.min.js\"></script>\n");
      out.write("  \n");
      out.write("  <script>\n");
      out.write("  \t$(document).ready(function(){\n");
      out.write("  \t\t$(\"#btnGetLast\").click(function(){\n");
      out.write("  \t\t\t\n");
      out.write("  \t\t\t//테스트코드\n");
      out.write("  \t\t\tparcel = {\n");
      out.write("\t\t\t\t'key' : 'test',\n");
      out.write("  \t\t\t\t'val' : 100\n");
      out.write("  \t\t\t};\n");
      out.write("  \t\t\t\n");
      out.write("  \t\t\t$.ajax({\n");
      out.write("\t\t        url: 'apis/getLastTimeline',\n");
      out.write("\t\t        type: 'post',\n");
      out.write("\t\t        dataType: 'json',\n");
      out.write("\t\t        contentType: 'application/json',\n");
      out.write("\t\t        success: function(data){\n");
      out.write("\t\t        \tconsole.log(\"success: apis/getLastTimeline\");\n");
      out.write("\t\t        \tvis2force(data);\n");
      out.write("\t\t        },\n");
      out.write("\t\t        error: function(equest,status,error) {\n");
      out.write("\t\t        \tconsole.error(\"fail: apis/getLastTImeline\");\n");
      out.write("\t\t        },\n");
      out.write("\t\t        data: JSON.stringify(parcel)\n");
      out.write("\t\t    });\n");
      out.write("  \t\t});\n");
      out.write("  \t});\n");
      out.write("  \t\n");
      out.write("  \t\n");
      out.write("  \t\n");
      out.write("  \tfunction vis2force(data){\n");
      out.write("  \t\tconsole.log(data)\n");
      out.write("  \t\t\n");
      out.write("  \t\tvar nodesJson = [];\n");
      out.write("  \t\tvar linkJson = [];\n");
      out.write("  \t\t\n");
      out.write("  \t\tvar visdata = JSON.parse(data['visdata']);\n");
      out.write("  \t\tconsole.log(visdata);\n");
      out.write("\n");
      out.write("  \t\t\n");
      out.write("\t\tvar nodes = visdata['nodes'];\n");
      out.write("\t\tvar minmax = getNodeMinMax(nodes);\n");
      out.write("\t\tvar min = minmax['min'];\n");
      out.write("\t\tvar max = minmax['max'];\n");
      out.write("\t\tvar nodeVals = []\n");
      out.write("\t\tnodes.forEach(function(d, k){\n");
      out.write("\t\t\tval = d['val'];\n");
      out.write("\t\t\tnodeVals.push(val);\n");
      out.write("\t\t\tmin = Math.min(min, val);\n");
      out.write("\t\t\tmax = Math.max(max, val)\n");
      out.write("\t\t\tnode = { \n");
      out.write("\t\t\t\t\"id\" : d['id'],\n");
      out.write(" \t\t\t\t\"word\" : d['word'],\n");
      out.write(" \t\t\t\t\"group\" : d['group'],\n");
      out.write("  \t\t\t\t\"val\" : Math.max(\n");
      out.write("\t\t\t\t\tMath.min(\n");
      out.write("\t\t\t\t\t\tMath.sqrt(((d['val'] - min) / (max - min))*100)*4\n");
      out.write("\t\t\t\t\t\t, 20\n");
      out.write("\t\t\t\t\t)\n");
      out.write("\t\t\t\t\t, 2\n");
      out.write("  \t\t\t\t)\n");
      out.write("  \t\t\t}\n");
      out.write("\t\t\tnodesJson.push(node);\n");
      out.write("\t\t\tconsole.log(node);\n");
      out.write("  \t\t});\n");
      out.write("  \t\t\t  \t\t\t\n");
      out.write("  \t\t\t\n");
      out.write("  \t\t//link 처리\n");
      out.write("  \t\t//dmatrix 는 link 부분이므로 나중에...\n");
      out.write("  \t\tvar dmatrix = visdata['dmatrix'];\n");
      out.write("  \t\tvar dlines = dmatrix.split(\"\\n\");\n");
      out.write("  \t\tdlines.pop();\n");
      out.write("  \t\tdlines.forEach(function(d, i){\n");
      out.write("  \t\t\tconsole.log(d)\n");
      out.write("  \t\t});\n");
      out.write("  \t\t\t\n");
      out.write("  \t\t\n");
      out.write("  \t\tvar mtrx = []\n");
      out.write("  \t\tfor (j in dlines) {\n");
      out.write("  \t\t\tvar dcols = dlines[j].split(\",\");\n");
      out.write("  \t\t\tmtrx[j] = dcols;\n");
      out.write("  \t\t}\t\n");
      out.write("  \t\tlen = mtrx.length\n");
      out.write("  \t\t\t\n");
      out.write("  \t\t\t\n");
      out.write("  \t\tfor (j = 1; j < len; j++){\n");
      out.write("  \t\t\tvar tempLinks = []\n");
      out.write("  \t\t\tfor(k = 1; k < j; k++) {\n");
      out.write("  \t\t\t\tdist = mtrx[j][k];\n");
      out.write("  \t\t\t\tif (dist > 0.7)\n");
      out.write("  \t\t\t\t\tcontinue;\n");
      out.write("  \t\t\t\telse\n");
      out.write("  \t\t\t\t\tdist = Math.pow(dist*5, 4);\n");
      out.write("  \t\t\t\t\n");
      out.write("  \t\t\t\tvar forward = {\n");
      out.write(" \t\t\t\t\t\"source\" : nodes[j-1]['id'], \"target\" : nodes[k-1]['id'], \"dist\" : dist,\n");
      out.write(" \t\t\t\t\t\"group\" : nodes[k-1]['gorup']\n");
      out.write("   \t\t\t\t};\n");
      out.write("   \t\t\t\tvar reverse = {\n");
      out.write("   \t\t\t\t\t\"source\" : nodes[k-1]['id'], \"target\" : nodes[j-1]['id'], \"dist\" : dist\t,\n");
      out.write("   \t\t\t\t\t\"group\" : nodes[j-1]['gorup']\n");
      out.write("   \t\t\t\t};\n");
      out.write("  \t\t\t\t\t\n");
      out.write(" \t\t\t\tif (nodeVals[j-1] < nodeVals[k-1]){\n");
      out.write(" \t\t\t\t\ttempLinks.push(forward);\n");
      out.write(" \t\t\t\t} else if (nodeVals[j-1] > nodeVals[k-1]){\n");
      out.write(" \t\t\t\t\ttempLinks.push(reverse)\n");
      out.write(" \t\t\t\t} else {\n");
      out.write(" \t\t\t\t\ttempLinks.push(forward);\n");
      out.write(" \t\t\t\t\ttempLinks.push(reverse);\n");
      out.write(" \t\t\t\t}\n");
      out.write(" \t\t\t}\n");
      out.write(" \t\t\ttempLinks.forEach(function(d, k){\n");
      out.write("\t\t\t\tconsole.log(d);\n");
      out.write("\t\t\t\tlinkJson.push(d);\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}  \t\t\t\n");
      out.write(" \t\t\n");
      out.write("  \t\tdrawGalaxy({ \n");
      out.write("\t\t\tnodes: nodesJson,\n");
      out.write("\t\t\tlinks: linkJson\n");
      out.write("\t\t});\n");
      out.write("  \t\t\n");
      out.write("  \t}\n");
      out.write("  \t\n");
      out.write("  \t\n");
      out.write("  \tfunction getNodeMinMax(nodes){\n");
      out.write("  \t\tvar min = 30;\n");
      out.write("  \t\tvar max = 70;\n");
      out.write("  \t\tnodes.forEach(function(d, i){\n");
      out.write("  \t\t\tmin = Math.min(min, d['val']);\n");
      out.write("  \t\t\tmax = Math.max(max, d['val']);\n");
      out.write("  \t\t});\n");
      out.write("  \t\t\n");
      out.write("  \t\treturn {\"min\" : min, \"max\" : max}\n");
      out.write("  \t}\n");
      out.write("  \t\n");
      out.write("  \t\n");
      out.write("  \tfunction drawGalaxy(gData){\n");
      out.write("  \t\tconsole.log(gData);\n");
      out.write("  \t\t\n");
      out.write("  \t\tconst graph = ForceGraph3D()\n");
      out.write("\t\t(document.getElementById('3d-graph')) \t   \n");
      out.write("\t\t.nodeAutoColorBy('group')      \n");
      out.write("        .nodeThreeObject(node => {\n");
      out.write("\t\t\tconst obj = new THREE.Mesh(\n");
      out.write("            \tnew THREE.SphereGeometry(10),\n");
      out.write("            \tnew THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\n");
      out.write("          \t);          \n");
      out.write("\t\t\tconst sprite = new SpriteText(node.word);\n");
      out.write("\t\t\t\tsprite.color = node.color;\n");
      out.write("     \t    \tsprite.textHeight = node.val;\n");
      out.write("     \t    \tobj.add(sprite);\n");
      out.write("     \t    return obj;\n");
      out.write("        })      \n");
      out.write("\t\t.linkOpacity(0.05)\t\t\n");
      out.write("\t\t//.linkDirectionalParticles(3)\n");
      out.write("        .graphData(gData);\n");
      out.write("  \t\t\n");
      out.write("        //graph.d3Force('charge').strength(-500);\n");
      out.write("\n");
      out.write("\t\tconst linkForce = graph\n");
      out.write("\t    \t.d3Force('link')\n");
      out.write("\t    \t.distance(link => link.dist);\n");
      out.write("  \t\t\n");
      out.write("  \t}\n");
      out.write("  \t\n");
      out.write("  \t\n");
      out.write("  </script>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
