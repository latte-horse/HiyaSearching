/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2019-10-23 06:42:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class j_002dTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("\tver.3 : \r\n");
      out.write("\t\t노드 : 노드에 텍스트로 표시, 노드 그룹별 자동 색상\r\n");
      out.write("\t\t링크 : 링크 길이 지정값 주기, 링크에 작은 구체 꾸미기\r\n");
      out.write("\t\t뷰어 : 노드클릭시 카메라 카메라 줌인\r\n");
      out.write("-->\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("\t<style> body { margin: 0; } </style>\r\n");
      out.write(" \t <!-- current resources -->\r\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/js/home.js\"></script>\r\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/three.js\"></script>\r\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/three-spritetext.js\"></script>\r\n");
      out.write("  <script type=\"text/javascript\" src=\"resources/third-party-etc/3d-force-graph.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"3d-graph\"></div>\r\n");
      out.write("\t<script>  \r\n");
      out.write("\t\tconst gData = {\r\n");
      out.write("\t\t\tnodes : [\r\n");
      out.write("\t\t\t\t{\"id\": \"조국\", \"group\": 1, \"val\":5},\r\n");
      out.write("    \t  \t\t{\"id\": \"사퇴\", \"group\": 2, \"val\":3},\r\n");
      out.write("    \t  \t\t{\"id\": \"서초구\", \"group\": 3, \"val\":2},\r\n");
      out.write("    \t  \t\t{\"id\": \"시위\", \"group\": 3, \"val\":2},\r\n");
      out.write("    \t  \t\t{\"id\": \"촛불\", \"group\": 3, \"val\":1},\r\n");
      out.write("    \t  \t\t{\"id\": \"박종선\", \"group\": 4, \"val\":10},\r\n");
      out.write("    \t  \t\t{\"id\": \"종선\", \"group\": 4, \"val\":4},\r\n");
      out.write("    \t  \t\t{\"id\": \"수원\", \"group\": 4, \"val\":2}  \t  \r\n");
      out.write("      \t\t],\r\n");
      out.write("      \t\tlinks : [\r\n");
      out.write("    \t  \t\t{\"source\": \"사퇴\", \"target\": \"조국\", \"dist\" : 1},\r\n");
      out.write("    \t  \t\t{\"source\": \"서초구\", \"target\": \"조국\", \"dist\" : 3},\r\n");
      out.write("    \t  \t\t{\"source\": \"서초구\", \"target\": \"사퇴\", \"dist\" : 3},\r\n");
      out.write("    \t  \t\t{\"source\": \"촛불\", \"target\": \"서초구\", \"dist\" : 7},\r\n");
      out.write("    \t  \t\t{\"source\": \"시위\", \"target\": \"서초구\", \"dist\" : 50},\r\n");
      out.write("    \t  \t\t{\"source\": \"박종선\", \"target\": \"조국\", \"dist\" : 100},\r\n");
      out.write("    \t  \t\t{\"source\": \"종선\", \"target\": \"박종선\", \"dist\" : 5},\r\n");
      out.write("    \t \t\t{\"source\": \"수원\", \"target\": \"박종선\", \"dist\" : 5},\r\n");
      out.write("    \t\t\t{\"source\": \"종선\", \"target\": \"시위\", \"dist\" : 200}\r\n");
      out.write("      \t\t]\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tconst elem = document.getElementById('3d-graph');\r\n");
      out.write("\t\tconst graph = ForceGraph3D()\r\n");
      out.write("\t\t\t(elem) \t   \r\n");
      out.write("\t\t\t.nodeAutoColorBy('group')      \r\n");
      out.write("\t        .nodeThreeObject(node => {\r\n");
      out.write("\t\t\t\tconst obj = new THREE.Mesh(\r\n");
      out.write("\t            \tnew THREE.SphereGeometry(10),\r\n");
      out.write("\t            \tnew THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\r\n");
      out.write("\t          \t);          \r\n");
      out.write("\t\t\t\tconst sprite = new SpriteText(node.id);\r\n");
      out.write("\t\t\t\t\tsprite.color = node.color;\r\n");
      out.write("\t     \t    \tsprite.textHeight = 8;\r\n");
      out.write("\t     \t    \tobj.add(sprite);\r\n");
      out.write("\t     \t\treturn obj;\r\n");
      out.write("\t        })      \r\n");
      out.write("\t\t\t.linkOpacity(0.3)\t\t\r\n");
      out.write("\t\t\t.linkDirectionalParticles(3)\t\t\r\n");
      out.write("\t\t\t.onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)\r\n");
      out.write("\t        .onNodeClick(node => {\r\n");
      out.write("        \t\tconst distance = 40;\r\n");
      out.write("\t          \tconst distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\r\n");
      out.write("\t\t        graph.cameraPosition(\r\n");
      out.write("\t\t        \t{ x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n");
      out.write("\t\t            node, // lookAt ({ x, y, z })\r\n");
      out.write("\t\t            3000  // ms transition duration\r\n");
      out.write("\t\t        );\r\n");
      out.write("\t        })\t\t\r\n");
      out.write("\t        .graphData(gData);    \r\n");
      out.write("    \r\n");
      out.write("\t\tconst linkForce = graph\r\n");
      out.write("        \t.d3Force('link')\r\n");
      out.write("        \t.distance(link => link.dist);\r\n");
      out.write("\t</script>  \r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
